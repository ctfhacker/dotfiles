# Use more intelligent Up/Down behavior: use the text that has already been
# typed as the prefix for searching through commands, like in Vim.
# "\e[A": history-search-backward
# "\e[B": history-search-forward
# "\e[C": forward-char
# "\e[D": backward-char

# Try to stay at the same the cursor position when moving through the history.
set history-preserve-point on

# Use Ctrl+← and Ctrl+→ (or Alt/Meta, or Esc) to move between words.
"\e[1;5D": backward-word
"\e[1;3D": backward-word
"\e[5D": backward-word
"\e\e[D": backward-word
"\e[1;5C": forward-word
"\e[1;3C": forward-word
"\e[5C": forward-word
"\e\e[C": forward-word
"\e[1;2D": backward-word
"\e[1;2C": forward-word

# Use Vi, not emacs
set editing-mode vi

set keymap vi-command
# Show all completions as soon as I press tab, even if more than one
set show-all-if-ambiguous on

# Ignore case
set completion-ignore-case on
# set menu-complete-display-prefix on

# set keymap vi-insert
# TAB: menu-complete
# Shift tab cycles completions backward
# "\e[Z": menu-complete-backward

set show-mode-in-prompt on
# set vi-ins-mode-string "\e[34m(ins)\e[39m"
# set vi-cmd-mode-string "\e[31m(cmd)\e[39m"

# Remap specific keys in vi mode
$if mode=vi
    # normal mode
    set keymap vi-command
    "H": beginning-of-line
    "L": end-of-line
    "j": history-search-forward
    "k": history-search-backward
    set keymap vi-insert
    "jk": vi-movement-mode
$endif

set expand-tilde on
